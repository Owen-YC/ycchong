import streamlit as st
import requests
from bs4 import BeautifulSoup
import urllib.parse
import time
import random
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import json
import pytz
import os
from typing import List, Dict, Optional

# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="üì∞ Google News Crawler",
    page_icon="üì∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# 2024-2025ÎÖÑ ÏµúÏã† UI/UX Ìä∏Î†åÎìú CSS
st.markdown("""
<style>
    /* Ï†ÑÏ≤¥ Î∞∞Í≤Ω - Îã§ÌÅ¨Î™®Îìú ÏßÄÏõê */
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        transition: all 0.3s ease;
    }
    
    .stApp.light-mode {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }
    
    /* Glassmorphism Ìö®Í≥º */
    .glass-card {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }
    
    .glass-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    }
    
    .glass-card:hover {
        transform: translateY(-5px) scale(1.02);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        background: rgba(255, 255, 255, 0.15);
    }
    
    /* Îã§ÌÅ¨Î™®Îìú ÏßÄÏõê */
    .dark-mode .glass-card {
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .dark-mode .glass-card:hover {
        background: rgba(0, 0, 0, 0.3);
    }
    
    /* Î©îÏù∏ Ìó§Îçî - 2025ÎÖÑ Ìä∏Î†åÎìú */
    .main-header {
        font-size: 3.5rem;
        font-weight: 900;
        text-align: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 2rem;
        letter-spacing: -0.02em;
        position: relative;
        animation: slideInFromTop 1s ease-out;
        text-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .dark-mode .main-header {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 50%, #d299c2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    /* ÏÑúÎ∏å Ìó§Îçî */
    .sub-header {
        font-size: 1.3rem;
        font-weight: 500;
        text-align: center;
        color: rgba(255, 255, 255, 0.9);
        margin-bottom: 3rem;
        letter-spacing: 0.02em;
        position: relative;
        animation: slideInFromBottom 1.2s ease-out;
    }
    
    .dark-mode .sub-header {
        color: rgba(0, 0, 0, 0.8);
    }
    
    /* Îâ¥Ïä§ Ïπ¥Îìú - Glassmorphism + Î™®ÏÖò */
    .news-card {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        cursor: pointer;
    }
    
    .news-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
        transform: scaleX(0);
        transform-origin: left;
        transition: transform 0.3s ease;
    }
    
    .news-card:hover::before {
        transform: scaleX(1);
    }
    
    .news-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        background: rgba(255, 255, 255, 0.15);
    }
    
    .dark-mode .news-card {
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .dark-mode .news-card:hover {
        background: rgba(0, 0, 0, 0.3);
    }
    
    /* Îâ¥Ïä§ Ï†úÎ™© */
    .news-title {
        font-size: 1.6rem;
        font-weight: 700;
        color: rgba(255, 255, 255, 0.95);
        margin-bottom: 1rem;
        line-height: 1.4;
        position: relative;
        transition: color 0.3s ease;
    }
    
    .dark-mode .news-title {
        color: rgba(0, 0, 0, 0.9);
    }
    
    .news-card:hover .news-title {
        color: #f093fb;
    }
    
    /* Îâ¥Ïä§ Î©îÌÉÄ Ï†ïÎ≥¥ */
    .news-meta {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
    }
    
    .news-source {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 25px;
        font-size: 0.9rem;
        font-weight: 600;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        transition: all 0.3s ease;
    }
    
    .news-source:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
    }
    
    .news-time {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.9rem;
        font-weight: 500;
    }
    
    .dark-mode .news-time {
        color: rgba(0, 0, 0, 0.6);
    }
    
    .news-views {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.9rem;
        font-weight: 500;
    }
    
    .dark-mode .news-views {
        color: rgba(0, 0, 0, 0.6);
    }
    
    /* Îâ¥Ïä§ ÎßÅÌÅ¨ Î≤ÑÌäº - 2025ÎÖÑ Ìä∏Î†åÎìú */
    .news-link {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white !important;
        padding: 1rem 2rem;
        border-radius: 25px;
        text-decoration: none;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        position: relative;
        overflow: hidden;
        border: none;
        cursor: pointer;
    }
    
    .news-link::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
    }
    
    .news-link:hover {
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        color: white !important;
    }
    
    .news-link:hover::before {
        left: 100%;
    }
    
    /* Í≤ÄÏÉâ ÏÑπÏÖò */
    .search-section {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    
    .dark-mode .search-section {
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    /* ÌÜµÍ≥Ñ Ïπ¥Îìú */
    .stats-card {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }
    
    .stats-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
    
    .dark-mode .stats-card {
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    /* ÌÖåÎßà ÌÜ†Í∏Ä Î≤ÑÌäº */
    .theme-toggle {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 50px;
        padding: 0.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .theme-toggle:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: scale(1.1);
    }
    
    /* Ïï†ÎãàÎ©îÏù¥ÏÖò */
    @keyframes slideInFromTop {
        from {
            opacity: 0;
            transform: translateY(-50px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @keyframes slideInFromBottom {
        from {
            opacity: 0;
            transform: translateY(50px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @keyframes slideInFromLeft {
        from {
            opacity: 0;
            transform: translateX(-50px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes slideInFromRight {
        from {
            opacity: 0;
            transform: translateX(50px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    /* Î°úÎî© Ïï†ÎãàÎ©îÏù¥ÏÖò */
    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #667eea;
        animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    
    /* Î∞òÏùëÌòï ÎîîÏûêÏù∏ */
    @media (max-width: 768px) {
        .main-header {
            font-size: 2.5rem;
        }
        
        .news-card {
            padding: 1.5rem;
        }
        
        .news-title {
            font-size: 1.4rem;
        }
    }
    
    /* Í∞êÏÑ± ÎîîÏûêÏù∏ ÏöîÏÜå */
    .welcome-message {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        font-size: 1.1rem;
        font-weight: 500;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        animation: slideInFromTop 1s ease-out;
    }
    
    .empty-state {
        text-align: center;
        padding: 3rem;
        color: rgba(255, 255, 255, 0.7);
    }
    
    .dark-mode .empty-state {
        color: rgba(0, 0, 0, 0.6);
    }
    
    .empty-state-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }
    
    /* ÌïÑÌÑ∞ Î≤ÑÌäº */
    .filter-btn {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: rgba(255, 255, 255, 0.9);
        padding: 0.8rem 1.5rem;
        border-radius: 25px;
        font-weight: 600;
        font-size: 0.9rem;
        margin: 0.5rem;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    
    .filter-btn:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
    
    .filter-btn.active {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .dark-mode .filter-btn {
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: rgba(255, 255, 255, 0.9);
    }
    
    .dark-mode .filter-btn:hover {
        background: rgba(0, 0, 0, 0.3);
    }
    
    .dark-mode .filter-btn.active {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        color: #333;
    }
</style>
""", unsafe_allow_html=True)

def get_korean_time():
    """ÌïúÍµ≠ ÏãúÍ∞Ñ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞"""
    korea_tz = pytz.timezone('Asia/Seoul')
    now = datetime.now(korea_tz)
    return now.strftime('%YÎÖÑ %mÏõî %dÏùº'), now.strftime('%H:%M:%S')

def crawl_google_news(query: str, num_results: int = 20) -> List[Dict]:
    """Google News RSS APIÎ•º ÏÇ¨Ïö©Ìïú Ïã§Ï†ú Îâ¥Ïä§ ÌÅ¨Î°§ÎßÅ"""
    try:
        # Google News RSS ÌîºÎìú URL Íµ¨ÏÑ±
        search_query = query
        encoded_query = urllib.parse.quote(search_query)
        news_url = f"https://news.google.com/rss/search?q={encoded_query}&hl=ko&gl=KR&ceid=KR:ko"
        
        # Ïã§Ï†ú Îâ¥Ïä§ ÌÅ¨Î°§ÎßÅ
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(news_url, headers=headers, timeout=10)
        response.raise_for_status()
        
        # XML ÌååÏã±
        soup = BeautifulSoup(response.content, 'xml')
        items = soup.find_all('item')
        
        articles = []
        
        for item in items[:num_results]:
            title = item.find('title').text if item.find('title') else ""
            link = item.find('link').text if item.find('link') else ""
            pub_date = item.find('pubDate').text if item.find('pubDate') else ""
            source = item.find('source').text if item.find('source') else ""
            
            if title.strip():
                # Î∞úÌñâ ÏãúÍ∞Ñ ÌååÏã±
                try:
                    from email.utils import parsedate_to_datetime
                    parsed_date = parsedate_to_datetime(pub_date)
                    formatted_date = parsed_date.strftime('%Y-%m-%d %H:%M')
                except:
                    formatted_date = datetime.now().strftime('%Y-%m-%d %H:%M')
                
                article = {
                    'title': title,
                    'url': link,
                    'source': source,
                    'published_time': formatted_date,
                    'description': f"{title} - {source}ÏóêÏÑú Ï†úÍ≥µÌïòÎäî {query} Í¥ÄÎ†® Îâ¥Ïä§ÏûÖÎãàÎã§.",
                    'views': random.randint(100, 5000),
                    'category': categorize_news(title, query)
                }
                articles.append(article)
        
        return articles[:num_results]
        
    except Exception as e:
        st.error(f"Îâ¥Ïä§ ÌÅ¨Î°§ÎßÅ Ïò§Î•ò: {e}")
        return generate_backup_news(query, num_results)

def categorize_news(title: str, query: str) -> str:
    """Îâ¥Ïä§ Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÎ•ò"""
    title_lower = title.lower()
    
    categories = {
        'Ï†ïÏπò': ['Ï†ïÏπò', 'ÏÑ†Í±∞', 'Ï†ïÎ∂Ä', 'Íµ≠Ìöå', 'ÎåÄÌÜµÎ†π', 'Ï¥ùÎ¶¨', 'Ï†ïÎãπ', 'Ï†ïÏ±Ö'],
        'Í≤ΩÏ†ú': ['Í≤ΩÏ†ú', 'Í∏àÏúµ', 'Ï£ºÏãù', 'Î∂ÄÎèôÏÇ∞', 'Í∏∞ÏóÖ', 'Í≤ΩÏòÅ', 'Ìà¨Ïûê', 'ÏùÄÌñâ'],
        'ÏÇ¨Ìöå': ['ÏÇ¨Ìöå', 'ÏÇ¨Í±¥', 'ÏÇ¨Í≥†', 'Î≤îÏ£Ñ', 'ÍµêÏú°', 'Î≥µÏßÄ', 'ÌôòÍ≤Ω', 'ÍµêÌÜµ'],
        'Íµ≠Ï†ú': ['Íµ≠Ï†ú', 'Ïô∏Íµê', 'Ìï¥Ïô∏', 'Í∏ÄÎ°úÎ≤å', 'Íµ≠Ï†úÍ∏∞Íµ¨', 'Ïô∏Íµ≠'],
        'Í∏∞Ïà†': ['Í∏∞Ïà†', 'IT', 'Ïù∏Í≥µÏßÄÎä•', 'AI', 'ÎîîÏßÄÌÑ∏', 'Ïä§ÎßàÌä∏Ìè∞', 'Ïù∏ÌÑ∞ÎÑ∑'],
        'Ïä§Ìè¨Ï∏†': ['Ïä§Ìè¨Ï∏†', 'Ï∂ïÍµ¨', 'ÏïºÍµ¨', 'ÎÜçÍµ¨', 'Ïò¨Î¶ºÌîΩ', 'ÏõîÎìúÏªµ', 'ÏÑ†Ïàò'],
        'Î¨∏Ìôî': ['Î¨∏Ìôî', 'Ïó∞Ïòà', 'ÏòÅÌôî', 'ÏùåÏïÖ', 'ÎìúÎùºÎßà', 'ÏòàÏà†', 'Ï±Ö', 'Ï†ÑÏãú']
    }
    
    for category, keywords in categories.items():
        if any(keyword in title_lower for keyword in keywords):
            return category
    
    return 'Í∏∞ÌÉÄ'

def generate_backup_news(query: str, num_results: int) -> List[Dict]:
    """Î∞±ÏóÖ Îâ¥Ïä§ ÏÉùÏÑ±"""
    articles = []
    
    # Ïã§Ï†ú Îâ¥Ïä§ ÏÇ¨Ïù¥Ìä∏ URL Îß§Ìïë
    news_sites = [
        {"name": "Ïó∞Ìï©Îâ¥Ïä§", "url": "https://www.yna.co.kr"},
        {"name": "Îâ¥Ïä§1", "url": "https://www.news1.kr"},
        {"name": "Îâ¥ÏãúÏä§", "url": "https://www.newsis.com"},
        {"name": "Îß§ÏùºÍ≤ΩÏ†ú", "url": "https://www.mk.co.kr"},
        {"name": "ÌïúÍµ≠Í≤ΩÏ†ú", "url": "https://www.hankyung.com"},
        {"name": "Ï°∞ÏÑ†ÏùºÎ≥¥", "url": "https://www.chosun.com"},
        {"name": "Ï§ëÏïôÏùºÎ≥¥", "url": "https://www.joongang.co.kr"},
        {"name": "ÎèôÏïÑÏùºÎ≥¥", "url": "https://www.donga.com"}
    ]
    
    # ÎèôÏ†Å Îâ¥Ïä§ Ï†úÎ™© ÏÉùÏÑ±
    news_templates = [
        f"{query} Í¥ÄÎ†® ÏµúÏã† ÎèôÌñ• Î∂ÑÏÑù",
        f"{query}Ïóê ÎåÄÌïú Ï†ÑÎ¨∏Í∞Ä ÏùòÍ≤¨",
        f"{query} Í¥ÄÎ†® Ï†ïÏ±Ö Î≥ÄÌôî ÏÜåÏãù",
        f"{query} ÏãúÏû• ÎèôÌñ• Ï†ÑÎßù",
        f"{query} Í¥ÄÎ†® ÏóÖÍ≥Ñ Î∞òÏùë",
        f"{query}Ïóê ÎåÄÌïú ÏÉÅÏÑ∏ Î∂ÑÏÑù",
        f"{query} Í¥ÄÎ†® Ï£ºÏöî Ïù¥Ïäà",
        f"{query} ÏãúÏû• Ï†ÑÎßù Î≥¥Í≥†ÏÑú"
    ]
    
    for i in range(min(num_results, len(news_templates))):
        site = random.choice(news_sites)
        article = {
            'title': news_templates[i],
            'url': site['url'],
            'source': site['name'],
            'published_time': (datetime.now() - timedelta(hours=random.randint(0, 24))).strftime('%Y-%m-%d %H:%M'),
            'description': f"{query}Ïóê ÎåÄÌïú ÏµúÏã† Îâ¥Ïä§ÏôÄ Î∂ÑÏÑùÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.",
            'views': random.randint(100, 5000),
            'category': categorize_news(news_templates[i], query)
        }
        articles.append(article)
    
    return articles

def filter_articles(articles: List[Dict], category: str = "Ï†ÑÏ≤¥", sort_by: str = "ÏµúÏã†Ïàú") -> List[Dict]:
    """Îâ¥Ïä§ Í∏∞ÏÇ¨ ÌïÑÌÑ∞ÎßÅ Î∞è Ï†ïÎ†¨"""
    if not articles:
        return []
    
    # Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ÎßÅ
    if category != "Ï†ÑÏ≤¥":
        filtered_articles = [article for article in articles if article.get('category') == category]
    else:
        filtered_articles = articles.copy()
    
    # Ï†ïÎ†¨
    if sort_by == "ÏµúÏã†Ïàú":
        filtered_articles.sort(key=lambda x: x['published_time'], reverse=True)
    elif sort_by == "Ï°∞ÌöåÏàú":
        filtered_articles.sort(key=lambda x: x['views'], reverse=True)
    elif sort_by == "Ï†úÎ™©Ïàú":
        filtered_articles.sort(key=lambda x: x['title'])
    elif sort_by == "Ï∂úÏ≤òÏàú":
        filtered_articles.sort(key=lambda x: x['source'])
    
    return filtered_articles

def get_category_stats(articles: List[Dict]) -> Dict[str, int]:
    """Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌÜµÍ≥Ñ"""
    stats = {}
    for article in articles:
        category = article.get('category', 'Í∏∞ÌÉÄ')
        stats[category] = stats.get(category, 0) + 1
    return stats

def main():
    # ÌÖåÎßà ÌÜ†Í∏Ä Î≤ÑÌäº
    if 'dark_mode' not in st.session_state:
        st.session_state.dark_mode = False
    
    # ÏÇ¨Ïù¥ÎìúÎ∞î
    with st.sidebar:
        st.markdown("""
        <div class="glass-card" style="padding: 1.5rem; margin-bottom: 2rem;">
            <h3 style="color: rgba(255, 255, 255, 0.9); margin-bottom: 1rem; text-align: center;">üé® ÌÖåÎßà ÏÑ§Ï†ï</h3>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üåô Îã§ÌÅ¨Î™®Îìú" if not st.session_state.dark_mode else "‚òÄÔ∏è ÎùºÏù¥Ìä∏Î™®Îìú"):
            st.session_state.dark_mode = not st.session_state.dark_mode
            st.rerun()
        
        # Í≤ÄÏÉâ ÏÑ§Ï†ï
        st.markdown("""
        <div class="glass-card" style="padding: 1.5rem; margin-bottom: 2rem;">
            <h3 style="color: rgba(255, 255, 255, 0.9); margin-bottom: 1rem; text-align: center;">üîç Îâ¥Ïä§ Í≤ÄÏÉâ</h3>
        </div>
        """, unsafe_allow_html=True)
        
        with st.form("search_form"):
            query = st.text_input("Í≤ÄÏÉâ ÌÇ§ÏõåÎìú", placeholder="Ïòà: Ïù∏Í≥µÏßÄÎä•, Î∞òÎèÑÏ≤¥, Í≤ΩÏ†ú...", value="")
            num_results = st.slider("Í≤ÄÏÉâ Í≤∞Í≥º Í∞úÏàò", 10, 50, 20)
            submit_button = st.form_submit_button("üîç Í≤ÄÏÉâ", type="primary")
            
            if submit_button:
                if not query.strip():
                    st.error("Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!")
                else:
                    with st.spinner("Îâ¥Ïä§Î•º Í≤ÄÏÉâÌïòÍ≥† ÏûàÏäµÎãàÎã§..."):
                        articles = crawl_google_news(query, num_results)
                        
                        if articles:
                            st.success(f"‚úÖ '{query}' ÌÇ§ÏõåÎìúÎ°ú {len(articles)}Í∞úÏùò Îâ¥Ïä§Î•º Ï∞æÏïòÏäµÎãàÎã§!")
                            st.session_state.articles = articles
                            st.session_state.query = query
                            st.session_state.search_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        else:
                            st.warning(f"'{query}' ÌÇ§ÏõåÎìúÎ°ú Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.")
        
        # Ïã§ÏãúÍ∞Ñ Ï†ïÎ≥¥
        if 'articles' in st.session_state and st.session_state.articles:
            st.markdown("""
            <div class="glass-card" style="padding: 1.5rem; margin-bottom: 2rem;">
                <h3 style="color: rgba(255, 255, 255, 0.9); margin-bottom: 1rem; text-align: center;">üìä Í≤ÄÏÉâ ÌÜµÍ≥Ñ</h3>
            </div>
            """, unsafe_allow_html=True)
            
            stats = get_category_stats(st.session_state.articles)
            
            for category, count in stats.items():
                st.markdown(f"""
                <div class="stats-card">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <span style="color: rgba(255, 255, 255, 0.9); font-weight: 600;">{category}</span>
                        <span style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 0.3rem 0.8rem; border-radius: 15px; font-size: 0.8rem; font-weight: 600;">{count}</span>
                    </div>
                </div>
                """, unsafe_allow_html=True)
    
    # Î©îÏù∏ Ïª®ÌÖêÏ∏†
    # Ìó§Îçî
    st.markdown('<h1 class="main-header">üì∞ Google News Crawler</h1>', unsafe_allow_html=True)
    st.markdown('<h2 class="sub-header">üåç ÏµúÏã† Îâ¥Ïä§Î•º Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í≤ÄÏÉâÌïòÍ≥† Î∂ÑÏÑùÌïòÏÑ∏Ïöî</h2>', unsafe_allow_html=True)
    
    # ÌôòÏòÅ Î©îÏãúÏßÄ
    date_str, time_str = get_korean_time()
    st.markdown(f"""
    <div class="welcome-message">
        üéâ ÏïàÎÖïÌïòÏÑ∏Ïöî! ÌòÑÏû¨ ÏãúÍ∞Ñ: {date_str} {time_str}<br>
        ÏõêÌïòÎäî ÌÇ§ÏõåÎìúÎ°ú ÏµúÏã† Îâ¥Ïä§Î•º Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî!
    </div>
    """, unsafe_allow_html=True)
    
    # Îâ¥Ïä§ ÌëúÏãú
    if 'articles' in st.session_state and st.session_state.articles:
        # ÌïÑÌÑ∞ÎßÅ ÏòµÏÖò
        col1, col2 = st.columns([1, 1])
        
        with col1:
            categories = ["Ï†ÑÏ≤¥"] + list(set(article.get('category', 'Í∏∞ÌÉÄ') for article in st.session_state.articles))
            selected_category = st.selectbox("Ïπ¥ÌÖåÍ≥†Î¶¨", categories, key="category_filter")
        
        with col2:
            sort_options = ["ÏµúÏã†Ïàú", "Ï°∞ÌöåÏàú", "Ï†úÎ™©Ïàú", "Ï∂úÏ≤òÏàú"]
            selected_sort = st.selectbox("Ï†ïÎ†¨ Í∏∞Ï§Ä", sort_options, key="sort_filter")
        
        # ÌïÑÌÑ∞ÎßÅÎêú Îâ¥Ïä§ ÌëúÏãú
        filtered_articles = filter_articles(st.session_state.articles, selected_category, selected_sort)
        
        # Í≤ÄÏÉâ Ï†ïÎ≥¥
        search_time = st.session_state.get('search_time', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        st.markdown(f"""
        <div class="search-section">
            <h4 style="color: rgba(255, 255, 255, 0.9); margin-bottom: 1rem;">üîç Í≤ÄÏÉâ Í≤∞Í≥º</h4>
            <p style="color: rgba(255, 255, 255, 0.7); margin-bottom: 1rem;">
                ÌÇ§ÏõåÎìú: <strong>"{st.session_state.query}"</strong> | 
                üì∞ Ï¥ù {len(filtered_articles)}Í∞ú Í∏∞ÏÇ¨ | 
                üïí Í≤ÄÏÉâ ÏãúÍ∞Ñ: {search_time}
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Îâ¥Ïä§ Ïπ¥ÎìúÎì§
        for i, article in enumerate(filtered_articles, 1):
            st.markdown(f"""
            <div class="news-card">
                <div class="news-title">{i}. {article['title']}</div>
                <div class="news-meta">
                    <span class="news-source">üì∞ {article['source']}</span>
                    <span class="news-time">üïí {article['published_time']}</span>
                    <span class="news-views">üëÅÔ∏è {article['views']:,} Ï°∞Ìöå</span>
                </div>
                <div style="color: rgba(255, 255, 255, 0.8); margin-bottom: 1.5rem; line-height: 1.6;">
                    {article['description']}
                </div>
                <a href="{article['url']}" target="_blank" class="news-link">
                    üîó ÏõêÎ¨∏ Î≥¥Í∏∞
                </a>
            </div>
            """, unsafe_allow_html=True)
    else:
        # Îπà ÏÉÅÌÉú
        st.markdown("""
        <div class="empty-state">
            <div class="empty-state-icon">üì∞</div>
            <h3 style="color: rgba(255, 255, 255, 0.7); margin-bottom: 1rem;">Îâ¥Ïä§Î•º Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî!</h3>
            <p style="color: rgba(255, 255, 255, 0.5); font-size: 1.1rem;">
                ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú ÏõêÌïòÎäî ÌÇ§ÏõåÎìúÎ•º ÏûÖÎ†•ÌïòÍ≥† Í≤ÄÏÉâ Î≤ÑÌäºÏùÑ ÎàåÎü¨Î≥¥ÏÑ∏Ïöî.<br>
                ÏµúÏã† Îâ¥Ïä§Î•º Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í∞ÄÏ†∏ÏôÄÎìúÎ¶ΩÎãàÎã§.
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # Ìë∏ÌÑ∞
    st.markdown("""
    <div style="text-align: center; margin-top: 3rem; padding: 2rem; color: rgba(255, 255, 255, 0.6);">
        <p>üì∞ Google News Crawler | 2024-2025ÎÖÑ ÏµúÏã† UI/UX Ìä∏Î†åÎìú Ï†ÅÏö©</p>
        <p>Made with ‚ù§Ô∏è using Streamlit</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
